# -*- coding: utf-8 -*-
"""Instance_Segmentation_Exercise_(2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mgLPwTdaBY-4ASazqq261MsSKlsoZ69c

# Mask R-CNN Model for Instance Segmentation

<img src="https://dl.fbaipublicfiles.com/detectron2/Detectron2-Logo-Horz.png" width="500">

# Install detectron2
"""

# build the environment with the appropriate libraries
!python -m pip install pyyaml==5.1
import sys, os, distutils.core
!git clone 'https://github.com/facebookresearch/detectron2'
dist = distutils.core.run_setup("./detectron2/setup.py")
!python -m pip install {' '.join([f"'{x}'" for x in dist.install_requires])}
sys.path.insert(0, os.path.abspath('./detectron2'))

# check versions and validate installation
import torch, detectron2
!nvcc --version
TORCH_VERSION = ".".join(torch.__version__.split(".")[:2])
CUDA_VERSION = torch.__version__.split("+")[-1]
print("torch: ", TORCH_VERSION, "; cuda: ", CUDA_VERSION)
print("detectron2:", detectron2.__version__)

"""**Υπενθύμιση:**
Στο σημείο αυτό, μην ξεχάσετε να αντικαταστήσετε το αρχείο visualizer.py που περιέχει ο κώδικας στο path /content/detectron2/detectron2/utils/visualizer.py με το αρχείο που σας δίνεται. Η αλλαγή αυτή γίνεται προκειμένου κάθε αντικείμενο της ίδιας κλάσης να λαμβάνει τον ίδιο χρωματισμό για να είναι ομοιόμορφο το τελικό βίντεο.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cp /content/visualizer.py /content/detectron2/detectron2/utils/visualizer.py

"""# A quick example"""

# Basic libraries imports
# Setup detectron2 logger
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

# import some common libraries
import numpy as np
import os, json, cv2, random
from google.colab.patches import cv2_imshow

# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog

# Download a picture from the internet
!wget https://people.ee.ethz.ch/~ihnatova/wespe/cityscapes/before_2.jpg

# Read the image in order to provide an input to the network
im = cv2.imread("/content/before_2.jpg")

# Print the image as following
cv2_imshow(im)

"""Then, we create a detectron2 config and a detectron2 `DefaultPredictor` to run inference on this image."""

# load the pretrained model
cfg = get_cfg()

cfg.merge_from_file(model_zoo.get_config_file("Cityscapes/mask_rcnn_R_50_FPN.yaml"))
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  # set threshold for this model

cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("Cityscapes/mask_rcnn_R_50_FPN.yaml")
predictor = DefaultPredictor(cfg)

# Make the prediction for the given image - INFERENCE
outputs = predictor(im)

# Prediction arrays
print(outputs["instances"].pred_classes)
print(outputs["instances"].pred_boxes)

# We can use `Visualizer` to draw the predictions on the image.
v = Visualizer(im[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2)
out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
cv2_imshow(out.get_image()[:, :, ::-1])

# Save the image
result_image = out.get_image()[:, :, ::-1]
save_path = "/content/output.png"
cv2.imwrite(save_path, result_image)

"""# Google Drive items import"""

# Import Google Drive files
from google.colab import drive
drive.mount('/content/drive')

"""# Organize image collection"""

# Update using your path
#%cp /content/drive/MyDrive/FramesSequence.zip /content/
#!unzip /content/FramesSequence.zip

"""#Sequential Frame Inference

**Άσκηση:**
Σας ζητείται να πραγματοποιήσετε inference σε μια σειρά από διαδοχικά frames από μια σκηνή οδήγησης. Για τον λόγο αυτό θα πρέπει να χρησιμοποιήσετε τον κώδικα από το παραπάνω παράδειγμα και να συμπληρώσετε κάποια σημεία στον ακόλουθο κώδικα προκειμένου να αυτοματοποιήσετε την διαδικασία του inference για έναν μεγάλο αριθμό από εικόνες.

- Hint 1: Δημιουργήστε μια λίστα που περιέχει τα path όλων των εικόνων για τις οποίες πρέπει να τρέξετε το inference
- Hint 2: Διαβάστε από αυτήν την λίστα ένα ένα τα στοιχεία και δημιουργήστε την κάθε εικόνα ως im = .... όπως στο παράδειγμα
- Hint 3: Αποθηκεύστε την κάθε εικόνα όπως στο παράδειγμα με όνομα το idx που προκύπτει από την for loop π.χ την τρίτη κατά σειρά εικόνα ως 3.png (Γενικά δηλαδή {idx}.png)
"""

import os
import cv2

# Change the paths if needed based on your folder names
input_folder = "/content/drive/MyDrive/stuttgart_00"
#λόγω του ότι με βόλεψε και δεν κόλλαγε στο στην πλήρη έυρεση του path
# ανέβασα το αρχείο => stuttgart_00 <= με τις εικόνες unziped και δεν έτρεξα το κελί που αφορουσε το unzip του αρχείου FramesSequence καθόλου
#κατανοώ ότι πιάνει πολύ χώρο τσάμπα στο drive αλλά δεν έτρεχε αλλιώς.
output_folder = "/content/video_sequence/"

os.makedirs(output_folder, exist_ok=True)

# load the pretrained model
cfg = get_cfg()

cfg.merge_from_file(model_zoo.get_config_file("Cityscapes/mask_rcnn_R_50_FPN.yaml"))
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  # set threshold for this model

cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("Cityscapes/mask_rcnn_R_50_FPN.yaml")
predictor = DefaultPredictor(cfg)

# HERE You have to create a list that contains all the file names for each frame.
# For example:
# image1.png
# image2.png
# ....
# imageN.png
# FILL THE FOLLOWING LINE
#images_list = []
images_list = sorted(os.listdir(input_folder))
# Perform Inference and save the result for every image
for idx, image_name in enumerate(images_list, start=1):
    # Create the path for each image dynamically and create the im variable based on the path
    # FILL THE CODE NEEDED
    image_path = os.path.join(input_folder, image_name)
    im = cv2.imread(image_path)
    # Create the corresponding output using predictor
    outputs = predictor(im)

    # Create the visualizer
    v = Visualizer(im[:, :, ::-1], metadata=MetadataCatalog.get(predictor.cfg.DATASETS.TRAIN[0]), scale=1.0)
    out = v.draw_instance_predictions(outputs["instances"].to("cpu"))

    # Save each image on a specific folder and give the name output_i (Hint: use idx to name each new image)
    # FILL THE CODE NEEDED
    result_image = out.get_image()[:, :, ::-1] #Convert RGB to BGR
    output_path = os.path.join(output_folder, f"frame_{idx:04d}.png")
    cv2.imwrite(output_path, result_image)

from google.colab import drive
drive.mount('/content/drive')

"""# Video Creation

Αφού έχετε ετοιμάσει τις εικόνες ως αποτέλεσμα του inference, τώρα πρέπει να τις συνθέσετε σε μορφή βίντεο χρησιμοποιώντας τον ακόλουθο κώδικα, απλά αλλάζοντας τα paths για την ανάγνωση/εγγραφή των αρχείων.
"""

from moviepy.editor import ImageSequenceClip
import os

# Define the paths based on your folders name
image_folder = '/content/video_sequence'
video_name = '/content/Video_Kokosalakis.mp4'

# load all the images and sort them
images = [os.path.join(image_folder, img) for img in os.listdir(image_folder) if img.endswith(".png")]
images.sort(key=lambda x: int(os.path.splitext(os.path.basename(x))[0].split("_")[1]))
#εδώ το μετέτρεψα έτσι γιατί χωρίς το => .split("_")[1] <= έπαιρνε ολόκληρο το όνομα του αρχείου
#π.χ. "frame_0016" και προσπαθούσε να το μετατρέψει σε int(), που οδηγούσε σε σφάλμα
#μόλις το άλλαξα πήρα το video κανονικά στο φάκελο που είχα ορίσει

# create video by giving the appropriate fps value
clip = ImageSequenceClip(images, fps=17) # change fps value
clip.write_videofile(video_name, codec='libx264')

print(f"Video saved as {video_name}")